class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int val) {
        this.val = val;
    }
}

public class InsertIntoBST {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        if (root == null) {
            return new TreeNode(val);
        }

        TreeNode current = root;
        while (current != null) {
            if (val > current.val) {
                if (current.right != null) {
                    current = current.right;
                } else {
                    current.right = new TreeNode(val);
                    break;
                }
            } else {
                if (current.left != null) {
                    current = current.left;
                } else {
                    current.left = new TreeNode(val);
                    break;
                }
            }
        }

        return root;
    }

    // Helper method to print the inorder traversal of the tree (for verification)
    public void inorderTraversal(TreeNode root) {
        if (root == null) {
            return;
        }

        inorderTraversal(root.left);
        System.out.print(root.val + " ");
        inorderTraversal(root.right);
    }

    public static void main(String[] args) {
        InsertIntoBST insertIntoBST = new InsertIntoBST();

        TreeNode root1 = new TreeNode(4);
        root1.left = new TreeNode(2);
        root1.right = new TreeNode(7);
        root1.left.left = new TreeNode(1);
        root1.left.right = new TreeNode(3);
        int val1 = 5;
        TreeNode result1 = insertIntoBST.insertIntoBST(root1, val1);
        // The resulting tree will be: [4, 2, 7, 1, 3, 5]
        insertIntoBST.inorderTraversal(result1); // Output: 1 2 3 4 5

        // ... (rest of the main method remains the same)
    }
}
