class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int val) {
        this.val = val;
    }
}

public class DeleteNodeBST {
    public TreeNode deleteNode(TreeNode root, int key) {
        if (root == null)
            return null;

        if (key < root.val) {
            root.left = deleteNode(root.left, key);
        } else if (key > root.val) {
            root.right = deleteNode(root.right, key);
        } else {
            // Found the node to be deleted
            if (root.left == null) {
                return root.right; // Case 1: Node with only right child or no child
            } else if (root.right == null) {
                return root.left; // Case 2: Node with only left child
            } else {
                // Case 3: Node with two children
                root.val = findMinValue(root.right); // Find in-order successor
                root.right = deleteNode(root.right, root.val); // Delete the in-order successor
            }
        }
        return root;
    }

    private int findMinValue(TreeNode node) {
        int minValue = node.val;
        while (node.left != null) {
            minValue = node.left.val;
            node = node.left;
        }
        return minValue;
    }

    public static void main(String[] args) {
        DeleteNodeBST deleteNodeBST = new DeleteNodeBST();

        // Test case 1
        TreeNode root1 = new TreeNode(5);
        root1.left = new TreeNode(3);
        root1.right = new TreeNode(6);
        root1.left.left = new TreeNode(2);
        root1.left.right = new TreeNode(4);
        root1.right.right = new TreeNode(7);
        int keyToDelete1 = 3;
        TreeNode result1 = deleteNodeBST.deleteNode(root1, keyToDelete1);
        System.out.println("BST after deleting node with key " + keyToDelete1 + ":");
        inOrderTraversal(result1);

        // Test case 2
        TreeNode root2 = new TreeNode(5);
        root2.left = new TreeNode(3);
        root2.right = new TreeNode(6);
        root2.left.left = new TreeNode(2);
        root2.left.right = new TreeNode(4);
        root2.right.right = new TreeNode(7);
        int keyToDelete2 = 0;
        TreeNode result2 = deleteNodeBST.deleteNode(root2, keyToDelete2);
        System.out.println("\nBST after deleting node with key " + keyToDelete2 + ":");
        inOrderTraversal(result2);

        // Test case 3
        TreeNode root3 = null;
        int keyToDelete3 = 0;
        TreeNode result3 = deleteNodeBST.deleteNode(root3, keyToDelete3);
        System.out.println("\nBST after deleting node with key " + keyToDelete3 + ":");
        inOrderTraversal(result3);
    }

    private static void inOrderTraversal(TreeNode root) {
        if (root != null) {
            inOrderTraversal(root.left);
            System.out.print(root.val + " ");
            inOrderTraversal(root.right);
        }
    }
}
